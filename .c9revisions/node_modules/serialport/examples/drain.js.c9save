{"ts":1390358146718,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var SerialPort = require(\"serialport\").SerialPort;\n\nvar sp = new SerialPort(\"/dev/cu.Cubelet-RGB\", {\n  baudrate: 38400\n});\n\nsp.on('open',function() {\n  sp.on('data', function(data) {\n    console.log('>>>>>', data);\n  });\n\n  var message = new Buffer('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');\n\n  function writeThenDrainThenWait(duration) {\n    console.log('Calling write...');\n    sp.write(message, function() {\n      console.log('...Write callback returned...');\n      // At this point, data may still be buffered and not sent out from the port yet (write function returns asynchrounously).\n      console.log('...Calling drain...');\n      sp.drain(function() {\n        // Now data has \"left the pipe\" (tcdrain[1]/FlushFileBuffers[2] finished blocking).\n        // [1] http://linux.die.net/man/3/tcdrain\n        // [2] http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx\n        console.log('...Drain callback returned...');\n        console.log('...Waiting', duration, 'milliseconds...');\n        setInterval(writeThenDrainThenWait, duration);\n      });\n    });\n  };\n\n  function writeThenWait(duration) {\n    console.log('Calling write...');\n    sp.write(message, function() {\n      console.log('...Write callback returned...'); // Write function call immediately returned (asynchrounous).\n      console.log('...Waiting', duration, 'milliseconds...');\n      // Even though write returned, the data may still be in the pipe, and hasn't reached your robot yet.\n      setInterval(writeThenWait, duration);\n    });\n  };\n\n  // Stuff starts happening here\n  writeThenDrainThenWait(1000);\n  //writeThenWait(1000);\n\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":1642}]],"length":1642}
