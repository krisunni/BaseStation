{"ts":1390357948396,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*jslint node: true */\n/*global describe, it */\n\"use strict\";\n\nvar chai = require('chai');\nvar util = require('util');\nvar serialPort = require('../serialport');\n\ndescribe ('requiresComPort', function() {\n  \n  describe('echo hello', function() {\n    it('sends hello to the last port and validates that it is received back (see arduinoEcho.ino for echo sketch)', function(done) {\n      serialPort.list(function(err, ports) {\n\n        chai.assert.isUndefined(err, util.inspect(err));\n        chai.assert.isDefined(ports, 'ports is not defined');\n        chai.assert.isTrue(ports.length > 0, 'no ports found');\n\n        var data = new Buffer(\"hello\");\n\n        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);\n        port.on('error', function(err) {\n          chai.assert.fail(util.inspect(err));\n        });\n\n        port.on('data', function(d) {\n          chai.assert.equal(data.toString(), d.toString(), 'incorrect data received');\n          port.close(function(err) {\n            chai.assert.isUndefined(err, util.inspect(err));\n            done();\n          });\n        });\n\n        port.open(function(err) {\n          chai.assert.isUndefined(err, util.inspect(err));\n          port.write(data);\n        });\n      });\n    });\n  });\n\n  describe('relaxed baud rate', function() {\n    it('opens a port with a non-standard baud rate', function(done) {\n      serialPort.list(function(err, ports) {\n\n        chai.assert.isUndefined(err, util.inspect(err));\n        chai.assert.isDefined(ports, 'ports is not defined');\n        chai.assert.isTrue(ports.length > 0, 'no ports found');\n\n        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, {baudrate: 5}, false);\n        port.on('error', function(err) {\n          chai.assert.fail(util.inspect(err));\n        });\n\n        port.open(function(err) {\n          chai.assert.isUndefined(err, util.inspect(err));\n          port.close(function(err) {\n            chai.assert.isUndefined(err, util.inspect(err));\n            done();\n          });\n        });\n      });\n    });\n  });\n\n  describe('simple write', function() {\n    it('opens a port and sends data without encountering error', function(done) {\n      serialPort.list(function(err, ports) {\n\n        chai.assert.isUndefined(err, util.inspect(err));\n        chai.assert.isDefined(ports, 'ports is not defined');\n        chai.assert.isTrue(ports.length > 0, 'no ports found');\n\n        var data = new Buffer(\"hello\");\n\n        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);\n        port.on('error', function(err) {\n          chai.assert.fail(util.inspect(err));\n        });\n\n        port.open(function(err) {\n          chai.assert.isUndefined(err, util.inspect(err));\n          port.write(data);\n          port.close(function(err) {\n            chai.assert.isUndefined(err, util.inspect(err));\n            done();\n          });\n        });\n      });\n    });\n  });\n\n    describe('validate close event', function() {\n    it('opens a port then closes it using events', function(done) {\n      serialPort.list(function(err, ports) {\n\n        chai.assert.isUndefined(err, util.inspect(err));\n        chai.assert.isDefined(ports, 'ports is not defined');\n        chai.assert.isTrue(ports.length > 0, 'no ports found');\n\n        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);\n\n        port.on('error', function(err) {\n          chai.assert.fail(util.inspect(err));\n        });\n\n        port.on('open', function() {\n          port.close();\n        });\n\n        port.on('close', function() {\n          done();\n        });\n\n        port.open();\n      });\n    });\n  });\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":3670}]],"length":3670}
