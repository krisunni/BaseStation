{"ts":1390352847445,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var fs = require('fs')\r\n,http = require('http'),\r\nsocketio = require('socket.io'),\r\nurl = require(\"url\"), \r\nSerialPort = require(\"serialport\").SerialPort\r\n\r\nvar socketServer;\r\nvar serialPort;\r\nvar portName = 'COM3'; //change this to your Arduino port\r\nvar sendData = \"\";\r\n\r\n// handle contains locations to browse to (vote and poll); pathnames.\r\nfunction startServer(route,handle,debug)\r\n{\r\n\t// on request event\r\n\tfunction onRequest(request, response) {\r\n\t  // parse the requested url into pathname. pathname will be compared\r\n\t  // in route.js to handle (var content), if it matches the a page will \r\n\t  // come up. Otherwise a 404 will be given. \r\n\t  var pathname = url.parse(request.url).pathname; \r\n\t  console.log(\"Request for \" + pathname + \" received\");\r\n\t  var content = route(handle,pathname,response,request,debug);\r\n\t}\r\n\t\r\n\tvar httpServer = http.createServer(onRequest).listen(1337, function(){\r\n\t\tconsole.log(\"Listening at: http://localhost:1337\");\r\n\t\tconsole.log(\"Server is up\");\r\n\t}); \r\n\tserialListener(debug);\r\n\tinitSocketIO(httpServer,debug);\r\n}\r\n\r\nfunction initSocketIO(httpServer,debug)\r\n{\r\n\tsocketServer = socketio.listen(httpServer);\r\n\tif(debug == false){\r\n\t\tsocketServer.set('log level', 1); // socket IO debug off\r\n\t}\r\n\tsocketServer.on('connection', function (socket) {\r\n\tconsole.log(\"user connected\");\r\n\tsocket.emit('onconnection', {pollOneValue:sendData});\r\n\tsocketServer.on('update', function(data) {\r\n\tsocket.emit('updateData',{pollOneValue:data});\r\n\t});\r\n\tsocket.on('buttonval', function(data) {\r\n\t\tserialPort.write(data + 'E');\r\n\t});\r\n\tsocket.on('sliderval', function(data) {\r\n\t\tserialPort.write(data + 'P');\r\n\t});\r\n\t\r\n    });\r\n}\r\n\r\n// Listen to serial port\r\nfunction serialListener(debug)\r\n{\r\n    var receivedData = \"\";\r\n    serialPort = new SerialPort(portName, {\r\n        baudrate: 9600,\r\n        // defaults for Arduino serial communication\r\n         dataBits: 8,\r\n         parity: 'none',\r\n         stopBits: 1,\r\n         flowControl: false\r\n    });\r\n \r\n    serialPort.on(\"open\", function () {\r\n      console.log('open serial communication');\r\n            // Listens to incoming data\r\n        serialPort.on('data', function(data) {\r\n             receivedData += data.toString();\r\n          if (receivedData .indexOf('E') >= 0 && receivedData .indexOf('B') >= 0) {\r\n           sendData = receivedData .substring(receivedData .indexOf('B') + 1, receivedData .indexOf('E'));\r\n           receivedData = '';\r\n         }\r\n         // send the incoming data to browser with websockets.\r\n       socketServer.emit('update', sendData);\r\n      });  \r\n    });  \r\n}\r\n\r\nexports.start = startServer;"]],"start1":0,"start2":0,"length1":0,"length2":2615}]],"length":2615}
{"contributors":[],"silentsave":false,"ts":1390357766081,"patch":[[{"diffs":[[0," = '"],[-1,"COM3"],[1,"/dev/ttyACM0"],[0,"'; /"]],"start1":205,"start2":205,"length1":12,"length2":20}]],"length":2623,"saved":false}
{"ts":1390357859893,"patch":[[{"diffs":[[0,"/ttyACM0"],[1,"cd"],[0,"'; //cha"]],"start1":213,"start2":213,"length1":16,"length2":18}]],"length":2625,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390357928729,"patch":[[{"diffs":[[0," = '"],[-1,"/dev/"],[0,"ttyA"]],"start1":205,"start2":205,"length1":13,"length2":8}]],"length":2620,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390360858398,"patch":[[{"diffs":[[0,"var "],[-1,"fs = require('fs')\r\n,http = require('http'),\r\nsocketio = require('socket.io'),\r\nurl = require(\"url\"), \r\n"],[0,"Seri"]],"start1":0,"start2":0,"length1":112,"length2":8},{"diffs":[[0,"ialPort "],[1," "],[0,"= requir"]],"start1":7,"start2":7,"length1":16,"length2":17},{"diffs":[[0,"rt\")"],[-1,".SerialPort\r\n\r\nvar socketServer;\r\nvar serialPort;\r\nvar portName = 'ttyACM0cd'; //change this to your Arduino port\r\nvar sendData = \"\";\r\n\r\n// handle contains locations to browse to (vote and poll); pathnames.\r\nfunction startServer(route,handle,debug)\r\n{\r\n\t// on request event\r\n\tfunction onRequest(request, response) {\r\n\t  // parse the requested url into pathname. pathname will be compared\r\n\t  // in route.js to handle (var content), if it matches the a page will \r\n\t  // come up. Otherwise a 404 will be given. \r\n\t  var pathname = url.parse(request.url).pathname; \r\n\t  console.log(\"Request for \" + pathname + \" received\");\r\n\t  var content = route(handle,pathname,response,request,debug);\r\n\t}\r\n\t\r\n\tvar httpServer = http.createServer(onRequest).listen(1337, function(){\r\n\t\tconsole.log(\"Listening at: http://localhost:1337\");\r\n\t\tconsole.log(\"Server is up\");\r\n\t}); \r\n\tserialListener(debug);\r\n\tinitSocketIO(httpServer,debug);\r\n}\r\n\r\nfunction initSocketIO(httpServer,debug)\r\n{\r\n\tsocketServer = socketio.listen(httpServer);\r\n\tif(debug == false){\r\n\t\tsocketServer.set('log level', 1); // socket IO debug off\r\n\t}\r\n\tsocketServer.on('connection', function (socket) {\r\n\tconsole.log(\"user connected\");\r\n\tsocket.emit('onconnection', {pollOneValue:sendData});\r\n\tsocketServer.on('update', function(data) {\r\n\tsocket.emit('updateData',{pollOneValue:data});\r\n\t});\r\n\tsocket.on('buttonval', function(data) {\r\n\t\tserialPort.write(data + 'E');\r\n\t});\r\n\tsocket.on('sliderval', function(data) {\r\n\t\tserialPort.write(data + 'P');\r\n\t});\r\n\t\r\n    });\r\n}\r\n\r\n// Listen to serial port\r\nfunction serialListener(debug)\r\n{\r\n    var receivedData = \"\";\r\n    serialPort = new SerialPort(portName, {\r\n        baudrate: 9600,\r\n        // defaults for Arduino serial communication\r\n         dataBits: 8,\r\n         parity: 'none',\r\n         stopBits: 1,\r\n         flowControl: false\r\n    });\r\n \r\n    serialPort.on(\"open\", function () {\r\n      console.log('open serial communication');\r\n            // Listens to incoming data\r\n        serialPort.on('data', function(data) {\r\n             receivedData += data.toString();\r\n          if (receivedData .indexOf('E') >= 0 && receivedData .indexOf('B') >= 0) {\r\n           sendData = receivedData .substring(receivedData .indexOf('B') + 1, receivedData .indexOf('E'));\r\n           receivedData = '';\r\n         }\r\n         // send the incoming data to browser with websockets.\r\n       socketServer.emit('update', sendData);\r\n      });  \r\n    });  \r\n}\r\n\r\nexports.start = startServer"],[1,";\r\nvar portName = '/dev/ttyACM0'"],[0,";"]],"start1":35,"start2":35,"length1":2482,"length2":37}]],"length":72,"saved":false}
{"ts":1390360898283,"patch":[[{"diffs":[[0,"tyACM0';"],[1,"\r\nvar sp = new SerialPort(); // instantiate the serial port.\r\nsp.open(portName, { // portName is instatiated to be COM3, replace as necessary\r\n   baudRate: 9600, // this is synced to what was set for the Arduino Code\r\n   dataBits: 8, // this is the default for Arduino serial communication\r\n   parity: 'none', // this is the default for Arduino serial communication\r\n   stopBits: 1, // this is the default for Arduino serial communication\r\n   flowControl: false // this is the default for Arduino serial communication\r\n});\r\nvar cleanData = ''; // this stores the clean data\r\nvar readData = '';  // this stores the buffer\r\nsp.on('data', function (data) { // call back when data is received\r\n    readData += data.toString(); // append data to buffer\r\n    // if the letters 'A' and 'B' are found on the buffer then isolate what's in the middle\r\n    // as clean data. Then clear the buffer. \r\n    if (readData.indexOf('B') >= 0 && readData.indexOf('A') >= 0) {\r\n        cleanData = readData.substring(readData.indexOf('A') + 1, readData.indexOf('B'));\r\n        readData = '';\r\n        /*\r\n            More code here later...\r\n        */\r\n    }\r\n});"]],"start1":64,"start2":64,"length1":8,"length2":1152}]],"length":1216,"saved":false}
{"ts":1390361088303,"patch":[[{"diffs":[[0,"require("],[-1,"\""],[1,"'"],[0,"serialpo"]],"start1":18,"start2":18,"length1":17,"length2":17},{"diffs":[[0,"port"],[-1,"\")"],[1,"').SerialPort"],[0,";\r\nv"]],"start1":33,"start2":33,"length1":10,"length2":21},{"diffs":[[0,"Name = '"],[-1,"/"],[0,"dev/ttyA"]],"start1":61,"start2":61,"length1":17,"length2":16},{"diffs":[[0,"ACM0';\r\n"],[1,"\r\nvar io = require('socket.io').listen(8000); // server listens for socket.io communication at port 8000\r\nio.set('log level', 1); // disables debugging. this is optional. you may remove it if desired.\r\n\r\n"],[0,"var sp ="]],"start1":76,"start2":76,"length1":16,"length2":220},{"diffs":[[0,"n\r\n});\r\n"],[1,"\r\nio.sockets.on('connection', function (socket) {\r\n\t// If socket.io receives message from the client browser then \r\n    // this call back will be executed.\r\n    socket.on('message', function (msg) {\r\n    \tconsole.log(msg);\r\n    });\r\n    // If a web browser disconnects from Socket.IO then this callback is called.\r\n    socket.on('disconnect', function () {\r\n    \tconsole.log('disconnected');\r\n    });\r\n});\r\n\r\n"],[0,"var clea"]],"start1":802,"start2":802,"length1":16,"length2":425},{"diffs":[[0,"    "],[-1,"/*\r\n            More code here later...\r\n        */\r\n    "],[1,"io.sockets.emit('message', cleanData);\r\n\t"],[0,"}\r\n});"],[1,"\r\n\r\n"]],"start1":1772,"start2":1772,"length1":67,"length2":55}]],"length":1827,"saved":false}
{"ts":1390361275452,"patch":[[{"diffs":[[-1,"var SerialPort  = require('"],[1,"// It captures data from Arduino "],[0,"serial"],[1," "],[0,"port"],[-1,"').SerialPort;\r\nvar portName = 'dev/ttyACM0';\r\n\r\nvar io = require('socket.io').listen(8000); // server listens for socket.io communication at port 8000\r\nio.set('log level', 1); // disables debugging. this is optional. you may remove it if desired.\r\n"],[1," and displays it in web page.\r\n\r\nvar http = require('http').createServer(handler);\r\nvar io = require('socket.io').listen(http);\r\nvar sys = require('sys');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar clients = [];\r\nvar HTTP_OK = 200,\r\n    HTTP_ERR_UNKNOWN = 500,\r\n    HTTP_ERR_NOT_FOUND = 404;\r\n\t\r\nhttp.listen(8000);\r\n\r\nvar SerialPort  = require('serialport').SerialPort;\r\nvar portName = 'COM10';"],[0,"\r\nva"]],"start1":0,"start2":0,"length1":290,"length2":460},{"diffs":[[0,"\r\n\r\n"],[-1,"io.sockets.on('connection', function (socket) {\r\n\t// If socket.io receives message from the client browser then \r\n    // this call back will be executed.\r\n    socket.on('message', function (msg) {\r\n    \tconsole.log(msg);\r\n    });\r\n    // If a web browser disconnects from Socket.IO then this callback is called.\r\n    socket.on('disconnect', function () {"],[1,"function contentType(ext) {\r\n    var ct;\r\n    switch (ext) {\r\n    case '.html':\r\n        ct = 'text/html';\r\n        break;\r\n\tcase '.htm':\r\n        ct = 'text/html';\r\n        break;\r\n    case '.css':\r\n        ct = 'text/css';\r\n        break;\r\n    case '.js':\r\n        ct = 'text/javascript';\r\n        break;\r\n    default:\r\n        ct = 'text/plain';\r\n        break;\r\n    }\r\n    return {'Content-Type': ct};\r\n}\r\n\r\n/*\r\n  The handler function is updated to handle diffferent file extensions\r\n  like html, htm and javascript.\r\n*/\r\nfunction handler(req, res) {\r\n\tvar filepath ; \r\n    var fileext;\r\n\t\t\r\n\tswitch (req.url) {\r\n\t\tcase '/':\r\n\t\t\tfilepath = \"./index.htm\"\r\n\t\t\tbreak;\r\n\t\tcase '/3rdParty/flot/jquery.js':\r\n\t\t\tfilepath = \"3rdParty/flot/jquery.js\";\r\n\t\t\tbreak;\t\r\n\t\tcase '/3rdParty/flot/jquery.flot.js':\r\n\t\t\tfilepath = \"3rdParty/flot/jquery.flot.js\";\r\n\t\t\tbreak;\t\r\n\t\tdefault :\r\n\t\t\tfilepath = req.url;\r\n\t\t\tbreak;\r\n    }\r\n\tfileext = path.extname(filepath); \r\n    console.log(\"filepath = \",filepath, \",fileext = \",fileext, \",request url =\", req.url);\r\n\t\t\r\n    fs.exists(filepath, function (f) {\r\n        if (f) {\r\n            fs.readFile(filepath, function (err, content) {\r\n                if (err) {\r\n\t\t\t\t\tconsole.log(\"ERROR \");\r\n                    res.writeHead(HTTP_ERR_UNKNOWN);\r\n                    res.end();\r\n                } else {\t\t\t\t\t\r\n\t\t\t\t\t//console.log(\"Success \");\r\n                    res.writeHead(HTTP_OK, contentType(fileext));\r\n                    res.end(content);\t\t\t\t\r\n                }\r\n            });"],[0,"\r\n    "],[1," "],[-1,"\tconsole.log('disconnected');\r\n    });\r\n"],[1,"   } else {\r\n\t\t\tconsole.log(\"Not found \");\r\n            res.writeHead(HTTP_ERR_NOT_FOUND);\r\n            res.end();\r\n        }\r\n    "],[0,"});\r\n"],[1,"}\t"],[0,"\r\nvar "],[-1,"cleanData = ''; // this stores the clean data"],[1,"buffer ; //contains raw data\r\nvar dataStore = \"\" ; // To hold the string\r\n\r\nio.sockets.on('connection', function(socket) {"],[0,"\r\n"],[1,"\t"],[0,"var "],[-1,"readData = '';  // this stores the buffer\r\n"],[1,"username;// Do you need this line ?? I think not..\r\n\tclients.push(socket); // Do you need this line ?? I think not..\r\n\tsocket.emit('welcome', {'salutation':'TMP36 Sensor output!'});\r\n\r\n    "],[0,"sp.o"]],"start1":978,"start2":978,"length1":513,"length2":1995},{"diffs":[[0,"ed\r\n"],[-1,"    readData +"],[1,"\t\tbuffer "],[0,"= da"]],"start1":3033,"start2":3033,"length1":22,"length2":17},{"diffs":[[0,"g();"],[-1," // append data to buffer\r\n    // if the letters 'A' and 'B' are found on the buffer then isolate what's in the middle\r\n    // as clean data. Then clear the buffer. \r\n    if (readData.indexOf('B') >= 0 && readData.indexOf('A') >= 0) {\r\n        cleanData = readData.substring(readData.indexOf('A') + 1, readData.indexOf('B'));\r\n        readData = '';\r\n        io."],[1,"\t\t\r\n\t\tconsole.log(\"Data received : \", buffer);\r\n\t\t// // // check for end character in buffer\r\n\t\tfor(i=0; i<buffer.length; i++)\r\n\t\t{\r\n\t\t\tif(buffer[i] != \"N\")\r\n\t\t\t{\r\n\t\t\t\t//store it in data\r\n\t\t\t\tdataStore = dataStore + buffer[i];\t\t\t\t\t\r\n\t\t\t}  \r\n\t\t\t if(buffer[i] == \"N\")\r\n\t\t\t {\r\n\t\t\t\t//console.log(\"Data sending  : \", dataStore);\r\n\t\t\t\t//spit the data\r\n\t\t\t\t//console.log(dataStore);\t\t\t\r\n\t\t\t\t"],[0,"socket"],[-1,"s"],[0,".emit('"],[-1,"message', cleanData);\r\n\t}\r\n});\r\n"],[1,"welcome', {'salutation':dataStore});    \r\n\t\t\t\t// //initialize data to null\t\r\n\t\t\t\tdataStore = \"\";\r\n\t\t\t }\r\n\t\t}\t\t\t\r\n    });\t\t\r\n});"],[0,"\r\n"]],"start1":3060,"start2":3060,"length1":414,"length2":530}]],"length":3590,"saved":false}
{"ts":1390361285265,"patch":[[{"diffs":[[0," = '"],[-1,"COM1"],[1,"/dev/ttyACM"],[0,"0';\r"]],"start1":445,"start2":445,"length1":12,"length2":19}]],"length":3597,"saved":false}
{"ts":1390362018489,"patch":[[{"diffs":[[0," port.\r\n"],[1,"var sp = new SerialPort(portName, {\r\n   baudRate: 9600,\r\n   dataBits: 8,\r\n   parity: 'none',\r\n   stopBits: 1,\r\n   flowControl: false\r\n});\r\n\r\n"],[0,"sp.open("]],"start1":517,"start2":517,"length1":16,"length2":157}]],"length":3738,"saved":false}
{"ts":1390362104813,"patch":[[{"diffs":[[0,"ACM0';\r\n"],[1,"//"],[0,"var sp ="]],"start1":457,"start2":457,"length1":16,"length2":18},{"diffs":[[0,"rtName, "],[1,"\r\n"],[0,"{\r\n   ba"]],"start1":553,"start2":553,"length1":16,"length2":18}]],"length":3742,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390363377505,"patch":[[{"diffs":[[0,"sp.open("],[1,");\r\n    /*"],[0,"portName"]],"start1":670,"start2":670,"length1":16,"length2":26},{"diffs":[[0,"on\r\n});\r"],[1,"\n*/\r"],[0,"\n\r\nfunct"]],"start1":1133,"start2":1133,"length1":16,"length2":20}]],"length":3756,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390445067835,"patch":[[{"diffs":[[-1,"// It captures data from Arduino serial port and displays it in web page.\r\n\r\nvar http = require('http').createServer(handler);\r\nvar io = require('socket.io').listen(http);\r\nvar sys = require('sys');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\nvar clients = [];\r\nvar HTTP_OK = 200,\r\n    HTTP_ERR_UNKNOWN = 500,\r\n    HTTP_ERR_NOT_FOUND = 404;\r\n\t\r\nhttp.listen(8000);\r\n\r\nvar SerialPort  = require('serialport').SerialPort;\r\nvar portName = '/dev/ttyACM0';\r\n//var sp = new SerialPort(); // instantiate the serial"],[1,"var fs = require('fs')\r\n,http = require('http'),\r\nsocketio = require('socket.io'),\r\nurl = require(\"url\"), \r\nSerialPort = require(\"serialport\").SerialPort\r\n\r\nvar socketServer;\r\nvar serialPort;\r\nvar portName = '/dev/ttyACM0'; //change this to your Arduino"],[0," port"],[-1,"."],[0,"\r\nvar s"],[-1,"p = new SerialPort(portName, "],[1,"endData = \"\";"],[0,"\r\n"],[-1,"{"],[0,"\r\n"],[-1,"   baudRate: 9600,\r\n   dataBits: 8,\r\n   parity: 'none',\r\n   stopBits: 1,\r\n   flowControl: false\r\n});\r\n\r\nsp.open();\r\n    /*portName, { // portName is instatiated to be COM3, replace as necessary"],[1,"// handle contains locations to browse to (vote and poll); pathnames.\r\nfunction startServer(route,handle,debug)\r\n{\r\n\t// on request event\r\n\tfunction onRequest(request, response) {"],[0,"\r\n"],[1,"\t"],[0,"  "],[-1," baudRate: 9600, // this is synced to what was set for the Arduino Code\r\n   dataBits: 8, // this is the default for Arduino serial communication\r\n   parity: 'none', // this is the default for Arduino serial communication"],[1,"// parse the requested url into pathname. pathname will be compared\r\n\t  // in route.js to handle (var content), if it matches the a page will "],[0,"\r\n"],[1,"\t"],[0,"  "],[-1," stopBits: 1, // this is the default for Arduino serial communication\r\n   flowControl: false // this is the default for Arduino serial communication\r\n});\r\n*/\r\n\r\nfunction contentType(ext) {\r\n    var ct;\r\n    switch (ext) {\r\n    case '.html':\r\n        ct = 'text/html';\r\n        break;\r\n\tcase '.htm':\r\n        ct = 'text/html';\r\n        break;\r\n    case '.css':\r\n        ct = 'text/css';\r\n        break;\r\n    case '.js':\r\n        ct = 'text/javascript';\r\n        break;\r\n    default:\r\n        ct = 'text/plain';\r\n        break;\r\n    }\r\n    return {'Content-Type': ct};\r\n}\r\n\r\n/*\r\n  The handler function is updated to handle diffferent file extensions\r\n  like html, htm and javascript.\r\n*/\r\nfunction handler(req, res) {\r\n\tvar filepath ; \r\n    var fileext;\r\n\t\t"],[1,"// come up. Otherwise a 404 will be given. \r\n\t  var pathname = url.parse(request.url).pathname; \r\n\t  console.log(\"Request for \" + pathname + \" received\");\r\n\t  var content = route(handle,pathname,response,request,debug);\r\n\t}\r\n\t\r\n\tvar httpServer = http.createServer(onRequest).listen(1337, function(){\r\n\t\tconsole.log(\"Listening at: http://localhost:1337\");\r\n\t\tconsole.log(\"Server is up\");\r\n\t}); \r\n\tserialListener(debug);\r\n\tinitSocketIO(httpServer,debug);\r\n}\r\n\r\nfunction initSocketIO(httpServer,debug)\r\n{\r\n\tsocketServer = socketio.listen(httpServer);\r\n\tif(debug == false){\r\n\t\tsocketServer.set('log level', 1); // socket IO debug off\r\n\t}"],[0,"\r\n\ts"],[-1,"witch (req.url) {\r\n\t\tcase '/':\r\n\t\t\tfilepath = \"./index.htm\"\r\n\t\t\tbreak;\r\n\t\tcase '/3rdParty/flot/jquery.js':\r\n\t\t\tfilepath = \"3rdParty/flot/jquery.js\";\r\n\t\t\tbreak;\t\r\n\t\tcase '/3rdParty/flot/jquery.flot.js':\r\n\t\t\tfilepath = \"3rdParty/flot/jquery.flot.js\";\r\n\t\t\tbreak;\t\r\n\t\tdefault :\r\n\t\t\tfilepath = req.url;\r\n\t\t\tbreak;\r\n    }\r\n\tfileext = path.extname(filepath"],[1,"ocketServer.on('connection', function (socket) {\r\n\tconsole.log(\"user connected\");\r\n\tsocket.emit('onconnection', {pollOneValue:sendData});\r\n\tsocketServer.on('update', function(data) {\r\n\tsocket.emit('updateData',{pollOneValue:data});\r\n\t}"],[0,");"],[-1," "],[0,"\r\n"],[-1,"    console.log(\"filepath = \",filepath, \",fileext = \",fileext, \",request url =\", req.url);\r\n\t\t\r\n    fs.exists(filepath, function (f) {\r\n        if (f) {\r\n            fs.readFile(filepath, "],[1,"\tsocket.on('buttonval', function(data) {\r\n\t\tserialPort.write(data + 'E');\r\n\t});\r\n\tsocket.on('sliderval', function(data) {\r\n\t\tserialPort.write(data + 'P');\r\n\t});\r\n\t\r\n    });\r\n}\r\n\r\n// Listen to serial port\r\n"],[0,"func"]],"start1":0,"start2":0,"length1":2292,"length2":1697},{"diffs":[[0,"ion "],[-1,"(err, content) {\r\n                if (err) {\r\n\t\t\t\t\tconsole.log(\"ERROR \");\r\n                    res.writeHead(HTTP_ERR_UNKNOWN);\r\n                    res.end();\r\n                } else {\t\t\t\t\t\r\n\t\t\t\t\t//console.log(\"Success \");\r\n                    res.writeHead(HTTP_OK, contentType(fileext));\r\n                    res.end(content);\t\t\t\t\r\n                }\r\n        "],[1,"serialListener(debug)\r\n{\r\n    var receivedData = \"\";\r\n    serialPort = new SerialPort(portName, {\r\n        baudrate: 9600,\r\n        // defaults for Arduino serial communication\r\n         dataBits: 8,\r\n         parity: 'none',\r\n         stopBits: 1,\r\n         flowControl: false\r\n"],[0,"    "]],"start1":1698,"start2":1698,"length1":370,"length2":287},{"diffs":[[0,";\r\n "],[-1," "],[1,"\r\n"],[0,"    "],[-1,"  } else {\r\n\t\t\tconsole.log(\"Not"],[1,"serialPort.on(\"open\","],[0," f"],[-1,"o"],[0,"un"],[-1,"d \");\r\n            res.writeHead(HTTP_ERR_NOT_FOUND);\r\n            res.end("],[1,"ction () {\r\n      console.log('open serial communication'"],[0,");\r\n"]],"start1":1987,"start2":1987,"length1":124,"length2":96},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"});\r\n}\t\r\nvar buffer ; //contains raw data\r\nvar dataStore = \"\" ; // To hold the string\r\n\r\nio.sockets.on('connection', function(socket) {\r\n\tvar username;// Do you need this line ?? I think not..\r\n\tclients.push(socket); // Do you need this line ?? I think not..\r\n\tsocket.emit('welcome', {'salutation':'TMP36 Sensor output!'});\r\n\r\n    sp.on('data', function (data) { // call back when d"],[1,"// Listens to incoming data\r\n        serialPort.on('data', function(data) {\r\n             receivedData += data.toString();\r\n          if (receivedData .indexOf('E') >= 0 && receivedData .indexOf('B') >= 0) {\r\n           sendD"],[0,"ata "],[-1,"is"],[1,"="],[0," rec"]],"start1":2087,"start2":2087,"length1":403,"length2":242},{"diffs":[[0,"ived"],[-1,"\r\n\t\tbuffer = data.toString();\t\t\r\n\t\tconsole.log(\"Data received : \", buffer);\r\n\t\t// // // check for end character in buffer\r\n\t\tfor(i=0; i<buffer.length; i++)\r\n\t\t{\r\n\t\t\tif(buffer[i] != \"N\")\r\n\t\t\t{\r\n\t\t\t\t//store it in data\r\n\t\t\t\tdataStore = dataStore + buffer[i];\t\t\t\t\t\r\n\t\t\t}  \r\n\t\t\t if(buffer[i] == \"N\")\r\n\t\t\t {\r\n\t\t\t\t//console.log(\"Data sending  : \","],[1,"Data .substring(receivedData .indexOf('B') + 1, receivedData .indexOf('E'));\r\n           receivedData = '';\r\n         }\r\n         // send the incoming"],[0," data"],[-1,"Store);\r\n\t\t\t\t//spit the data\r\n\t\t\t\t//console.log(dataStore);\t\t\t\r\n\t\t\t\tsocket.emit('welcome', {'salutation':dataStore});    \r\n\t\t\t\t// //initialize data to null\t\r\n\t\t\t\tdataStore = \"\";\r\n\t\t\t }\r\n\t\t}\t\t\t"],[1," to browser with websockets.\r\n       socketServer.emit('update', sendData);\r\n      });  "],[0,"\r\n  "]],"start1":2330,"start2":2330,"length1":545,"length2":251},{"diffs":[[0," });"],[-1,"\t\t"],[1,"  "],[0,"\r\n}"],[-1,");"],[0,"\r\n"],[1,"\r\nexports.start = startServer;"]],"start1":2582,"start2":2582,"length1":13,"length2":41}]],"length":2623,"saved":false}
{"ts":1390445548547,"patch":[[{"diffs":[[0,".listen("],[-1,"1337"],[1,"process.env.PORT"],[0,", functi"]],"start1":886,"start2":886,"length1":20,"length2":32}]],"length":2635,"saved":false}
{"ts":1390445615262,"patch":[[{"diffs":[[0,"ten("],[-1,"process.env.PORT"],[1,"1337"],[0,", fu"]],"start1":890,"start2":890,"length1":24,"length2":12}]],"length":2623,"saved":false}
{"ts":1390446670927,"patch":[[{"diffs":[[0,".listen("],[-1,"1337"],[1,"process.env.PORT"],[0,", functi"]],"start1":886,"start2":886,"length1":20,"length2":32}]],"length":2635,"saved":false}
{"ts":1390446698273,"patch":[[{"diffs":[[0,"ten("],[-1,"process.env.PORT"],[1,"1337"],[0,", fu"]],"start1":890,"start2":890,"length1":24,"length2":12}]],"length":2623,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390448005559,"patch":[[{"diffs":[[0,"e) {\r\n\t "],[-1," "],[0,"// parse"]],"start1":456,"start2":456,"length1":17,"length2":16},{"diffs":[[0,"ared\r\n\t "],[-1," "],[0,"// in ro"]],"start1":527,"start2":527,"length1":17,"length2":16},{"diffs":[[0,"ill \r\n\t "],[-1," "],[0,"// come "]],"start1":601,"start2":601,"length1":17,"length2":16},{"diffs":[[0," given. \r\n\t "],[-1," "],[0,"var pathname"]],"start1":644,"start2":644,"length1":25,"length2":24},{"diffs":[[0,"me; \r\n\t "],[-1," "],[0,"console."]],"start1":700,"start2":700,"length1":17,"length2":16},{"diffs":[[0,"d\");\r\n\t "],[-1," "],[0,"var cont"]],"start1":757,"start2":757,"length1":17,"length2":16}]],"length":2617,"saved":false}
{"ts":1390448034198,"patch":[[{"diffs":[[0,"fs')"],[1,","],[0,"\r\n"],[-1,","],[1,"    "],[0,"http"]],"start1":18,"start2":18,"length1":11,"length2":15},{"diffs":[[0,"ttp'),\r\n"],[1,"    "],[0,"socketio"]],"start1":46,"start2":46,"length1":16,"length2":20},{"diffs":[[0,".io'),\r\n"],[1,"    "],[0,"url = re"]],"start1":84,"start2":84,"length1":16,"length2":20},{"diffs":[[0,"(\"url\"),"],[-1," "],[0,"\r\n"],[1,"    "],[0,"SerialPo"]],"start1":109,"start2":109,"length1":19,"length2":22},{"diffs":[[0,"ute,"],[1," "],[0,"handle,"],[1," "],[0,"debug)"],[-1,"\r\n{\r\n\t"],[1," {\r\n    "],[0,"// o"]],"start1":391,"start2":391,"length1":27,"length2":31},{"diffs":[[0," event\r\n"],[-1,"\t"],[1,"    "],[0,"function"]],"start1":431,"start2":431,"length1":17,"length2":20},{"diffs":[[0,"nse) {\r\n"],[-1,"\t"],[1,"       "],[0," // pars"]],"start1":476,"start2":476,"length1":17,"length2":23},{"diffs":[[0,"mpared\r\n"],[-1,"\t"],[1,"       "],[0," // in r"]],"start1":553,"start2":553,"length1":17,"length2":23},{"diffs":[[0," will \r\n"],[-1,"\t"],[1,"       "],[0," // come"]],"start1":633,"start2":633,"length1":17,"length2":23},{"diffs":[[0,"iven. \r\n"],[-1,"\t"],[1,"       "],[0," var pat"]],"start1":686,"start2":686,"length1":17,"length2":23},{"diffs":[[0,"athname;"],[-1," "],[0,"\r\n"],[-1,"\t"],[1,"       "],[0," console"]],"start1":741,"start2":741,"length1":20,"length2":25},{"diffs":[[0,"ved\");\r\n"],[-1,"\t"],[1,"       "],[0," var con"]],"start1":806,"start2":806,"length1":17,"length2":23},{"diffs":[[0,"(handle,"],[1," "],[0,"pathname"]],"start1":841,"start2":841,"length1":16,"length2":17},{"diffs":[[0,"athname,"],[1," "],[0,"response"]],"start1":851,"start2":851,"length1":16,"length2":17},{"diffs":[[0,"esponse,"],[1," "],[0,"request,"],[1," "],[0,"debug);\r"]],"start1":861,"start2":861,"length1":24,"length2":26},{"diffs":[[0,");\r\n"],[-1,"\t"],[1,"    "],[0,"}\r\n"],[-1,"\t"],[0,"\r\n"],[-1,"\t"],[1,"    "],[0,"var "]],"start1":884,"start2":884,"length1":16,"length2":21},{"diffs":[[0,"tion"],[1," "],[0,"()"],[1," "],[0,"{\r\n"],[-1,"\t\t"],[1,"        "],[0,"cons"]],"start1":964,"start2":964,"length1":15,"length2":23},{"diffs":[[0,"337\");\r\n"],[-1,"\t\t"],[1,"        "],[0,"console."]],"start1":1028,"start2":1028,"length1":18,"length2":24},{"diffs":[[0,");\r\n"],[-1,"\t"],[1,"    "],[0,"});"],[-1," "],[0,"\r\n"],[-1,"\t"],[1,"    "],[0,"seri"]],"start1":1070,"start2":1070,"length1":16,"length2":21},{"diffs":[[0,"ebug);\r\n"],[-1,"\t"],[1,"    "],[0,"initSock"]],"start1":1103,"start2":1103,"length1":17,"length2":20},{"diffs":[[0,"(httpServer,"],[1," "],[0,"debug);\r\n}\r\n"]],"start1":1127,"start2":1127,"length1":24,"length2":25},{"diffs":[[0,"ver,"],[1," "],[0,"debug)"],[-1,"\r\n{\r\n\t"],[1," {\r\n    "],[0,"sock"]],"start1":1183,"start2":1183,"length1":20,"length2":23},{"diffs":[[0,");\r\n"],[-1,"\t"],[1,"    "],[0,"if"],[1," "],[0,"(deb"]],"start1":1243,"start2":1243,"length1":11,"length2":15},{"diffs":[[0,"= false)"],[1," "],[0,"{\r\n"],[-1,"\t\t"],[1,"        "],[0,"socketSe"]],"start1":1262,"start2":1262,"length1":21,"length2":28},{"diffs":[[0,"ff\r\n"],[-1,"\t}\r\n\t"],[1,"    }\r\n    "],[0,"sock"]],"start1":1336,"start2":1336,"length1":13,"length2":19},{"diffs":[[0,"ket) {\r\n"],[-1,"\t"],[1,"        "],[0,"console."]],"start1":1394,"start2":1394,"length1":17,"length2":24},{"diffs":[[0,"nnected\");\r\n"],[-1,"\t"],[1,"        "],[0,"socket.emit("]],"start1":1430,"start2":1430,"length1":25,"length2":32},{"diffs":[[0,"tion', {"],[1,"\r\n            "],[0,"pollOneV"]],"start1":1471,"start2":1471,"length1":16,"length2":30},{"diffs":[[0,"lue:"],[1," "],[0,"sendData"],[-1,"});\r\n\t"],[1,"\r\n        });\r\n        "],[0,"sock"]],"start1":1502,"start2":1502,"length1":22,"length2":40},{"diffs":[[0,"pdate', function"],[1," "],[0,"(data) {\r\n\tsocke"]],"start1":1556,"start2":1556,"length1":32,"length2":33},{"diffs":[[0,"ata) {\r\n"],[-1,"\t"],[1,"            "],[0,"socket.e"]],"start1":1575,"start2":1575,"length1":17,"length2":28},{"diffs":[[0,"teData',"],[-1,"{"],[1," {\r\n                "],[0,"pollOneV"]],"start1":1612,"start2":1612,"length1":17,"length2":36},{"diffs":[[0,"lue:"],[1," "],[0,"data"],[-1,"});\r\n\t});\r\n\t"],[1,"\r\n            });\r\n        });\r\n        "],[0,"sock"]],"start1":1649,"start2":1649,"length1":24,"length2":53},{"diffs":[[0,"onval', function"],[1," "],[0,"(data) {\r\n\t\tseri"]],"start1":1713,"start2":1713,"length1":32,"length2":33},{"diffs":[[0,"ction (data) {\r\n"],[-1,"\t\t"],[1,"            "],[0,"serialPort.write"]],"start1":1724,"start2":1724,"length1":34,"length2":44},{"diffs":[[0," 'E');\r\n"],[-1,"\t});\r\n\t"],[1,"        });\r\n        "],[0,"socket.o"]],"start1":1775,"start2":1775,"length1":23,"length2":37},{"diffs":[[0,"erval', function"],[1," "],[0,"(data) {\r\n\t\tseri"]],"start1":1819,"start2":1819,"length1":32,"length2":33},{"diffs":[[0," {\r\n"],[-1,"\t\t"],[1,"            "],[0,"seri"]],"start1":1842,"start2":1842,"length1":10,"length2":20},{"diffs":[[0,");\r\n"],[-1,"\t"],[1,"        "],[0,"});\r\n"],[-1,"\t"],[0,"\r\n  "]],"start1":1885,"start2":1885,"length1":15,"length2":21},{"diffs":[[0,"r(debug)"],[-1,"\r\n"],[1," "],[0,"{\r\n    v"]],"start1":1966,"start2":1966,"length1":18,"length2":17},{"diffs":[[0,"        "],[-1," "],[0,"dataBits"]],"start1":2130,"start2":2130,"length1":17,"length2":16},{"diffs":[[0,"ts: 8,\r\n"],[-1," "],[0,"        "]],"start1":2144,"start2":2144,"length1":17,"length2":16},{"diffs":[[0,"        "],[-1," "],[0,"stopBits"]],"start1":2177,"start2":2177,"length1":17,"length2":16},{"diffs":[[0,"ts: 1,\r\n"],[-1," "],[0,"        "]],"start1":2191,"start2":2191,"length1":17,"length2":16},{"diffs":[[0,"   });\r\n"],[-1," "],[1,""],[0,"\r\n    se"]],"start1":2228,"start2":2228,"length1":17,"length2":16},{"diffs":[[0,"() {\r\n      "],[1,"  "],[0,"console.log("]],"start1":2273,"start2":2273,"length1":24,"length2":26},{"diffs":[[0,"ication');\r\n"],[-1,"    "],[0,"        // L"]],"start1":2318,"start2":2318,"length1":28,"length2":24},{"diffs":[[0,"function"],[1," "],[0,"(data) {"]],"start1":2397,"start2":2397,"length1":16,"length2":17},{"diffs":[[0,"ction (data) {\r\n"],[-1," "],[0,"            rece"]],"start1":2400,"start2":2400,"length1":33,"length2":32},{"diffs":[[0,"\r\n          "],[1,"  "],[0,"if (received"]],"start1":2460,"start2":2460,"length1":24,"length2":26},{"diffs":[[0,"if (receivedData"],[-1," "],[0,".indexOf('E') >="]],"start1":2474,"start2":2474,"length1":33,"length2":32},{"diffs":[[0," && receivedData"],[-1," "],[0,".indexOf('B') >="]],"start1":2508,"start2":2508,"length1":33,"length2":32},{"diffs":[[0,"        "],[1,"     "],[0,"sendData"]],"start1":2550,"start2":2550,"length1":16,"length2":21},{"diffs":[[0,"ivedData"],[-1," "],[0,".substri"]],"start1":2578,"start2":2578,"length1":17,"length2":16},{"diffs":[[0,"ing(receivedData"],[-1," "],[0,".indexOf('B') + "]],"start1":2593,"start2":2593,"length1":33,"length2":32},{"diffs":[[0,"ivedData"],[-1," "],[0,".indexOf"]],"start1":2632,"start2":2632,"length1":17,"length2":16},{"diffs":[[0,"));\r\n           "],[1,"     "],[0,"receivedData = '"]],"start1":2652,"start2":2652,"length1":32,"length2":37},{"diffs":[[0,";\r\n         "],[-1,"}\r\n"],[1,"   }\r\n   "],[0,"         // "]],"start1":2690,"start2":2690,"length1":27,"length2":33},{"diffs":[[0,"ts.\r\n       "],[1,"     "],[0,"socketServer"]],"start1":2770,"start2":2770,"length1":24,"length2":29},{"diffs":[[0,"\r\n      "],[1,"  "],[0,"});"],[-1,"  "],[0,"\r\n    })"]],"start1":2825,"start2":2825,"length1":21,"length2":21},{"diffs":[[0,"\n    });"],[-1,"  "],[0,"\r\n}\r\n\r\ne"]],"start1":2839,"start2":2839,"length1":18,"length2":16}]],"length":2882,"saved":false}
{"ts":1390448084245,"patch":[[{"diffs":[[0,"debug =="],[1,"="],[0," false) "]],"start1":1255,"start2":1255,"length1":16,"length2":17}]],"length":2883,"saved":false}
{"contributors":[],"silentsave":false,"ts":1390514993729,"patch":[[{"diffs":[[0,"e('fs'),"],[-1,"\r"],[0,"\n    htt"]],"start1":15,"start2":15,"length1":17,"length2":16},{"diffs":[[0,"'http'),"],[-1,"\r"],[0,"\n    soc"]],"start1":43,"start2":43,"length1":17,"length2":16},{"diffs":[[0,"et.io'),"],[-1,"\r"],[0,"\n    url"]],"start1":80,"start2":80,"length1":17,"length2":16},{"diffs":[[0,"(\"url\"),"],[-1,"\r"],[0,"\n    Ser"]],"start1":106,"start2":106,"length1":17,"length2":16},{"diffs":[[0,"rialPort"],[-1,"\r\n\r"],[1,"\n"],[0,"\nvar soc"]],"start1":156,"start2":156,"length1":19,"length2":17},{"diffs":[[0,"tServer;"],[-1,"\r"],[0,"\nvar ser"]],"start1":175,"start2":175,"length1":17,"length2":16},{"diffs":[[0,"ialPort;"],[-1,"\r"],[0,"\nvar por"]],"start1":191,"start2":191,"length1":17,"length2":16},{"diffs":[[0,"ino port"],[-1,"\r"],[0,"\nvar sen"]],"start1":257,"start2":257,"length1":17,"length2":16},{"diffs":[[0,"ta = \"\";"],[-1,"\r\n\r"],[1,"\n"],[0,"\n// hand"]],"start1":276,"start2":276,"length1":19,"length2":17},{"diffs":[[0,"thnames."],[-1,"\r"],[0,"\nfunctio"]],"start1":347,"start2":347,"length1":17,"length2":16},{"diffs":[[0,"le, debug) {"],[-1,"\r"],[0,"\n    // on r"]],"start1":388,"start2":388,"length1":25,"length2":24},{"diffs":[[0,"st event"],[-1,"\r"],[0,"\n    fun"]],"start1":416,"start2":416,"length1":17,"length2":16},{"diffs":[[0," response) {"],[-1,"\r"],[0,"\n        // "]],"start1":456,"start2":456,"length1":25,"length2":24},{"diffs":[[0,"compared"],[-1,"\r"],[0,"\n       "]],"start1":536,"start2":536,"length1":17,"length2":16},{"diffs":[[0,"ge will "],[-1,"\r"],[0,"\n       "]],"start1":615,"start2":615,"length1":17,"length2":16},{"diffs":[[0," given. "],[-1,"\r"],[0,"\n       "]],"start1":667,"start2":667,"length1":17,"length2":16},{"diffs":[[0,"athname;"],[-1,"\r"],[0,"\n       "]],"start1":723,"start2":723,"length1":17,"length2":16},{"diffs":[[0," received\");"],[-1,"\r"],[0,"\n        var"]],"start1":781,"start2":781,"length1":25,"length2":24},{"diffs":[[0,"ug);"],[-1,"\r"],[0,"\n    }"],[-1,"\r\n\r"],[1,"\n"],[0,"\n   "]],"start1":862,"start2":862,"length1":18,"length2":15},{"diffs":[[0,"n(1337, function"],[-1," "],[0,"() {"],[-1,"\r"],[0,"\n        console"]],"start1":929,"start2":929,"length1":38,"length2":36},{"diffs":[[0,":1337\");"],[-1,"\r"],[0,"\n       "]],"start1":1001,"start2":1001,"length1":17,"length2":16},{"diffs":[[0,"is up\");"],[-1,"\r"],[0,"\n    });"],[-1,"\r"],[0,"\n    ser"]],"start1":1038,"start2":1038,"length1":26,"length2":24},{"diffs":[[0,"(debug);"],[-1,"\r"],[0,"\n    ini"]],"start1":1073,"start2":1073,"length1":17,"length2":16},{"diffs":[[0," debug);"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\nfunctio"]],"start1":1110,"start2":1110,"length1":22,"length2":19},{"diffs":[[0,"er, debug) {"],[-1,"\r"],[0,"\n    socketS"]],"start1":1152,"start2":1152,"length1":25,"length2":24},{"diffs":[[0,"Server);"],[-1,"\r"],[0,"\n    if "]],"start1":1204,"start2":1204,"length1":17,"length2":16},{"diffs":[[0,"false) {"],[-1,"\r"],[0,"\n       "]],"start1":1231,"start2":1231,"length1":17,"length2":16},{"diffs":[[0," off"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n   "]],"start1":1300,"start2":1300,"length1":16,"length2":14},{"diffs":[[0,"function"],[-1," "],[0,"(socket)"]],"start1":1345,"start2":1345,"length1":17,"length2":16},{"diffs":[[0,"ocket) {"],[-1,"\r"],[0,"\n       "]],"start1":1355,"start2":1355,"length1":17,"length2":16},{"diffs":[[0,"ected\");"],[-1,"\r"],[0,"\n       "]],"start1":1394,"start2":1394,"length1":17,"length2":16},{"diffs":[[0,"nnection', {"],[-1,"\r"],[0,"\n           "]],"start1":1428,"start2":1428,"length1":25,"length2":24},{"diffs":[[0,"sendData"],[-1,"\r"],[0,"\n       "]],"start1":1467,"start2":1467,"length1":17,"length2":16},{"diffs":[[0,"Data\n        });"],[-1,"\r"],[0,"\n        socketS"]],"start1":1471,"start2":1471,"length1":33,"length2":32},{"diffs":[[0,"e', function"],[-1," "],[0,"(data) {"],[-1,"\r"],[0,"\n           "]],"start1":1518,"start2":1518,"length1":34,"length2":32},{"diffs":[[0,"Data', {"],[-1,"\r"],[0,"\n       "]],"start1":1570,"start2":1570,"length1":17,"length2":16},{"diffs":[[0,"eValue: data"],[-1,"\r"],[0,"\n           "]],"start1":1601,"start2":1601,"length1":25,"length2":24},{"diffs":[[0,"\n            });"],[-1,"\r"],[0,"\n        });\r\n  "]],"start1":1613,"start2":1613,"length1":33,"length2":32},{"diffs":[[0," });\n        });"],[-1,"\r"],[0,"\n        socket."]],"start1":1625,"start2":1625,"length1":33,"length2":32},{"diffs":[[0,"l', function"],[-1," "],[0,"(data) {"],[-1,"\r"],[0,"\n           "]],"start1":1669,"start2":1669,"length1":34,"length2":32},{"diffs":[[0," + 'E');"],[-1,"\r"],[0,"\n       "]],"start1":1723,"start2":1723,"length1":17,"length2":16},{"diffs":[[0,"\n        });"],[-1,"\r"],[0,"\n        soc"]],"start1":1731,"start2":1731,"length1":25,"length2":24},{"diffs":[[0,"l', function"],[-1," "],[0,"(data) {"],[-1,"\r"],[0,"\n           "]],"start1":1771,"start2":1771,"length1":34,"length2":32},{"diffs":[[0," + 'P');"],[-1,"\r"],[0,"\n       "]],"start1":1825,"start2":1825,"length1":17,"length2":16},{"diffs":[[0," });"],[-1,"\r\n\r"],[1,"\n"],[0,"\n    });"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\n// "]],"start1":1841,"start2":1841,"length1":25,"length2":20},{"diffs":[[0,"ial port"],[-1,"\r"],[0,"\nfunctio"]],"start1":1874,"start2":1874,"length1":17,"length2":16},{"diffs":[[0,"debug) {"],[-1,"\r"],[0,"\n    var"]],"start1":1907,"start2":1907,"length1":17,"length2":16},{"diffs":[[0,"ta = \"\";"],[-1,"\r"],[0,"\n    ser"]],"start1":1934,"start2":1934,"length1":17,"length2":16},{"diffs":[[0,"tName, {"],[-1,"\r"],[0,"\n       "]],"start1":1978,"start2":1978,"length1":17,"length2":16},{"diffs":[[0,"e: 9600,"],[-1,"\r"],[0,"\n       "]],"start1":2002,"start2":2002,"length1":17,"length2":16},{"diffs":[[0,"nication"],[-1,"\r"],[0,"\n       "]],"start1":2055,"start2":2055,"length1":17,"length2":16},{"diffs":[[0,"Bits: 8,"],[-1,"\r"],[0,"\n       "]],"start1":2076,"start2":2076,"length1":17,"length2":16},{"diffs":[[0," 'none',"],[-1,"\r"],[0,"\n       "]],"start1":2100,"start2":2100,"length1":17,"length2":16},{"diffs":[[0,"Bits: 1,"],[-1,"\r"],[0,"\n       "]],"start1":2121,"start2":2121,"length1":17,"length2":16},{"diffs":[[0,"alse"],[-1,"\r"],[0,"\n    });"],[-1,"\r\n\r"],[1,"\n"],[0,"\n   "]],"start1":2152,"start2":2152,"length1":20,"length2":17},{"diffs":[[0,"tion"],[-1," "],[0,"() {"],[-1,"\r"],[0,"\n   "]],"start1":2196,"start2":2196,"length1":14,"length2":12},{"diffs":[[0,"ation');"],[-1,"\r"],[0,"\n       "]],"start1":2246,"start2":2246,"length1":17,"length2":16},{"diffs":[[0,"ing data"],[-1,"\r"],[0,"\n       "]],"start1":2282,"start2":2282,"length1":17,"length2":16},{"diffs":[[0,"tion"],[-1," "],[0,"(data) {"],[-1,"\r"],[0,"\n   "]],"start1":2325,"start2":2325,"length1":18,"length2":16},{"diffs":[[0,"tring();"],[-1,"\r"],[0,"\n       "]],"start1":2374,"start2":2374,"length1":17,"length2":16},{"diffs":[[0," >= 0) {"],[-1,"\r"],[0,"\n       "]],"start1":2458,"start2":2458,"length1":17,"length2":16},{"diffs":[[0,"f('E'));"],[-1,"\r"],[0,"\n       "]],"start1":2567,"start2":2567,"length1":17,"length2":16},{"diffs":[[0,"ta = '';"],[-1,"\r"],[0,"\n       "]],"start1":2602,"start2":2602,"length1":17,"length2":16},{"diffs":[[0,"       }"],[-1,"\r"],[0,"\n       "]],"start1":2616,"start2":2616,"length1":17,"length2":16},{"diffs":[[0,"sockets."],[-1,"\r"],[0,"\n       "]],"start1":2682,"start2":2682,"length1":17,"length2":16},{"diffs":[[0,"ndData);"],[-1,"\r"],[0,"\n       "]],"start1":2733,"start2":2733,"length1":17,"length2":16},{"diffs":[[0," });"],[-1,"\r"],[0,"\n    });"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\nexp"]],"start1":2749,"start2":2749,"length1":23,"length2":19}]],"length":2793,"saved":false}
{"ts":1390515030573,"patch":[[{"diffs":[[0," startServer"],[1,"(debug)"],[0,";"]],"start1":2780,"start2":2780,"length1":13,"length2":20}]],"length":2800,"saved":false}
{"ts":1390515543119,"patch":[[{"diffs":[[0,"e('fs'),"],[1,"\r"],[0,"\n    htt"]],"start1":15,"start2":15,"length1":16,"length2":17},{"diffs":[[0,"'http'),"],[1,"\r"],[0,"\n    soc"]],"start1":44,"start2":44,"length1":16,"length2":17},{"diffs":[[0,"et.io'),"],[1,"\r"],[0,"\n    url"]],"start1":82,"start2":82,"length1":16,"length2":17},{"diffs":[[0,"(\"url\"),"],[1,"\r"],[0,"\n    Ser"]],"start1":109,"start2":109,"length1":16,"length2":17},{"diffs":[[0,"rialPort"],[-1,"\n"],[1,"\r\n\r"],[0,"\nvar soc"]],"start1":160,"start2":160,"length1":17,"length2":19},{"diffs":[[0,"tServer;"],[1,"\r"],[0,"\nvar ser"]],"start1":181,"start2":181,"length1":16,"length2":17},{"diffs":[[0,"ialPort;"],[1,"\r"],[0,"\nvar por"]],"start1":198,"start2":198,"length1":16,"length2":17},{"diffs":[[0,"ino port"],[1,"\r"],[0,"\nvar sen"]],"start1":265,"start2":265,"length1":16,"length2":17},{"diffs":[[0,"ta = \"\";"],[-1,"\n"],[1,"\r\n\r"],[0,"\n// hand"]],"start1":285,"start2":285,"length1":17,"length2":19},{"diffs":[[0,"thnames."],[1,"\r"],[0,"\nfunctio"]],"start1":358,"start2":358,"length1":16,"length2":17},{"diffs":[[0,"le, debug) {"],[1,"\r"],[0,"\n    // on r"]],"start1":400,"start2":400,"length1":24,"length2":25},{"diffs":[[0,"st event"],[1,"\r"],[0,"\n    fun"]],"start1":429,"start2":429,"length1":16,"length2":17},{"diffs":[[0," response) {"],[1,"\r"],[0,"\n        // "]],"start1":470,"start2":470,"length1":24,"length2":25},{"diffs":[[0,"compared"],[1,"\r"],[0,"\n       "]],"start1":551,"start2":551,"length1":16,"length2":17},{"diffs":[[0,"ge will "],[1,"\r"],[0,"\n       "]],"start1":631,"start2":631,"length1":16,"length2":17},{"diffs":[[0," given. "],[1,"\r"],[0,"\n       "]],"start1":684,"start2":684,"length1":16,"length2":17},{"diffs":[[0,"athname;"],[1,"\r"],[0,"\n       "]],"start1":741,"start2":741,"length1":16,"length2":17},{"diffs":[[0," received\");"],[1,"\r"],[0,"\n        var"]],"start1":800,"start2":800,"length1":24,"length2":25},{"diffs":[[0," debug);"],[1,"\r"],[0,"\n    }"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    var"]],"start1":878,"start2":878,"length1":23,"length2":26},{"diffs":[[0,"n(1337, function"],[1," "],[0,"() {"],[1,"\r"],[0,"\n        console"]],"start1":952,"start2":952,"length1":36,"length2":38},{"diffs":[[0,":1337\");"],[1,"\r"],[0,"\n       "]],"start1":1026,"start2":1026,"length1":16,"length2":17},{"diffs":[[0,"is up\");"],[1,"\r"],[0,"\n    });"],[1,"\r"],[0,"\n    ser"]],"start1":1064,"start2":1064,"length1":24,"length2":26},{"diffs":[[0,"(debug);"],[1,"\r"],[0,"\n    ini"]],"start1":1101,"start2":1101,"length1":16,"length2":17},{"diffs":[[0," debug);"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\nfunctio"]],"start1":1139,"start2":1139,"length1":19,"length2":22},{"diffs":[[0,"er, debug) {"],[1,"\r"],[0,"\n    socketS"]],"start1":1184,"start2":1184,"length1":24,"length2":25},{"diffs":[[0,"Server);"],[1,"\r"],[0,"\n    if "]],"start1":1237,"start2":1237,"length1":16,"length2":17},{"diffs":[[0,"false) {"],[1,"\r"],[0,"\n       "]],"start1":1265,"start2":1265,"length1":16,"length2":17},{"diffs":[[0,"ebug off"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    soc"]],"start1":1331,"start2":1331,"length1":22,"length2":24},{"diffs":[[0,"function"],[1," "],[0,"(socket)"]],"start1":1382,"start2":1382,"length1":16,"length2":17},{"diffs":[[0,"ocket) {"],[1,"\r"],[0,"\n       "]],"start1":1393,"start2":1393,"length1":16,"length2":17},{"diffs":[[0,"ected\");"],[1,"\r"],[0,"\n       "]],"start1":1433,"start2":1433,"length1":16,"length2":17},{"diffs":[[0,"nnection', {"],[1,"\r"],[0,"\n           "]],"start1":1468,"start2":1468,"length1":24,"length2":25},{"diffs":[[0,"sendData"],[1,"\r"],[0,"\n       "]],"start1":1508,"start2":1508,"length1":16,"length2":17},{"diffs":[[0,"ata\r\n        });"],[1,"\r"],[0,"\n        socketS"]],"start1":1513,"start2":1513,"length1":32,"length2":33},{"diffs":[[0,"e', function"],[1," "],[0,"(data) {"],[1,"\r"],[0,"\n           "]],"start1":1561,"start2":1561,"length1":32,"length2":34},{"diffs":[[0,"Data', {"],[1,"\r"],[0,"\n       "]],"start1":1615,"start2":1615,"length1":16,"length2":17},{"diffs":[[0,"eValue: data"],[1,"\r"],[0,"\n           "]],"start1":1647,"start2":1647,"length1":24,"length2":25},{"diffs":[[0,"\n            });"],[1,"\r"],[0,"\n        });\n   "]],"start1":1660,"start2":1660,"length1":32,"length2":33},{"diffs":[[0,"});\r\n        });"],[1,"\r"],[0,"\n        socket."]],"start1":1673,"start2":1673,"length1":32,"length2":33},{"diffs":[[0,"l', function"],[1," "],[0,"(data) {"],[1,"\r"],[0,"\n           "]],"start1":1718,"start2":1718,"length1":32,"length2":34},{"diffs":[[0," + 'E');"],[1,"\r"],[0,"\n       "]],"start1":1774,"start2":1774,"length1":16,"length2":17},{"diffs":[[0,"\n        });"],[1,"\r"],[0,"\n        soc"]],"start1":1783,"start2":1783,"length1":24,"length2":25},{"diffs":[[0,"l', function"],[1," "],[0,"(data) {"],[1,"\r"],[0,"\n           "]],"start1":1824,"start2":1824,"length1":32,"length2":34},{"diffs":[[0," + 'P');"],[1,"\r"],[0,"\n       "]],"start1":1880,"start2":1880,"length1":16,"length2":17},{"diffs":[[0," });"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    });"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n// "]],"start1":1897,"start2":1897,"length1":20,"length2":25},{"diffs":[[0,"ial port"],[1,"\r"],[0,"\nfunctio"]],"start1":1935,"start2":1935,"length1":16,"length2":17},{"diffs":[[0,"debug) {"],[1,"\r"],[0,"\n    var"]],"start1":1969,"start2":1969,"length1":16,"length2":17},{"diffs":[[0,"ta = \"\";"],[1,"\r"],[0,"\n    ser"]],"start1":1997,"start2":1997,"length1":16,"length2":17},{"diffs":[[0,"tName, {"],[1,"\r"],[0,"\n       "]],"start1":2042,"start2":2042,"length1":16,"length2":17},{"diffs":[[0,"e: 9600,"],[1,"\r"],[0,"\n       "]],"start1":2067,"start2":2067,"length1":16,"length2":17},{"diffs":[[0,"nication"],[1,"\r"],[0,"\n       "]],"start1":2121,"start2":2121,"length1":16,"length2":17},{"diffs":[[0,"Bits: 8,"],[1,"\r"],[0,"\n       "]],"start1":2143,"start2":2143,"length1":16,"length2":17},{"diffs":[[0," 'none',"],[1,"\r"],[0,"\n       "]],"start1":2168,"start2":2168,"length1":16,"length2":17},{"diffs":[[0,"Bits: 1,"],[1,"\r"],[0,"\n       "]],"start1":2190,"start2":2190,"length1":16,"length2":17},{"diffs":[[0,"l: false"],[1,"\r"],[0,"\n    });"],[-1,"\n"],[1,"\r\n\r"],[0,"\n    ser"]],"start1":2218,"start2":2218,"length1":25,"length2":28},{"diffs":[[0,"function"],[1," "],[0,"() {"],[1,"\r"],[0,"\n       "]],"start1":2265,"start2":2265,"length1":20,"length2":22},{"diffs":[[0,"ation');"],[1,"\r"],[0,"\n       "]],"start1":2321,"start2":2321,"length1":16,"length2":17},{"diffs":[[0,"ing data"],[1,"\r"],[0,"\n       "]],"start1":2358,"start2":2358,"length1":16,"length2":17},{"diffs":[[0,"function"],[1," "],[0,"(data) {"],[1,"\r"],[0,"\n       "]],"start1":2398,"start2":2398,"length1":24,"length2":26},{"diffs":[[0,"tring();"],[1,"\r"],[0,"\n       "]],"start1":2453,"start2":2453,"length1":16,"length2":17},{"diffs":[[0," >= 0) {"],[1,"\r"],[0,"\n       "]],"start1":2538,"start2":2538,"length1":16,"length2":17},{"diffs":[[0,"f('E'));"],[1,"\r"],[0,"\n       "]],"start1":2648,"start2":2648,"length1":16,"length2":17},{"diffs":[[0,"ta = '';"],[1,"\r"],[0,"\n       "]],"start1":2684,"start2":2684,"length1":16,"length2":17},{"diffs":[[0,"       }"],[1,"\r"],[0,"\n       "]],"start1":2699,"start2":2699,"length1":16,"length2":17},{"diffs":[[0,"sockets."],[1,"\r"],[0,"\n       "]],"start1":2766,"start2":2766,"length1":16,"length2":17},{"diffs":[[0,"ndData);"],[1,"\r"],[0,"\n       "]],"start1":2818,"start2":2818,"length1":16,"length2":17},{"diffs":[[0," });"],[1,"\r"],[0,"\n    });"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\nexp"]],"start1":2835,"start2":2835,"length1":19,"length2":23},{"diffs":[[0,"rtServer"],[-1,"(debug)"],[0,";"]],"start1":2874,"start2":2874,"length1":16,"length2":9}]],"length":2883,"saved":false}
