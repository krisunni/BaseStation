{"ts":1390444621385,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*\n\tPublic API\n*/\n\nexports.writeNumber = function(n)\n{\n// parse number into multiplier and remainder //\n\tvar m = Math.floor(n/255);\n\tvar r = n%255;\n\tvar data = [1, m, r];\n\tconsole.log('sending to arduino ::', data);\n\tsendDataToArduino(new Buffer(data));\n}\n\nexports.setAnimation = function(n)\n{\n\tvar data = [2, n];\n\tconsole.log('sending to arduino ::', data);\n\tsendDataToArduino(new Buffer(data));\n}\n\nexports.setAutoMode = function(n)\n{\n\tvar data = [3, n];\n\tconsole.log('sending to arduino ::', data);\n\tsendDataToArduino(new Buffer(data));\n}\n\n/*\n\tPrivate Methods\n*/\n\nvar arduino;\nvar socket = require('./socket_server');\nvar serialport = require('serialport');\nvar exec = require('child_process').exec;\n\n/*\n\tAttempt to connect to Arduino\n*/\n\nvar detectArduinoOnOSX = function()\n{\n\tvar port;\n\tconsole.log('* attempting to detect arduino on mac osx *');\n\texec('ls /dev/tty.*', function(error, stdout, stderr){\n\t\tif (stdout){\n\t\t\tvar ports = stdout.split('\\n');\n\t\t\tfor (var i = ports.length - 1; i >= 0; i--){\n\t\t\t\tif (ports[i].search('usbmodem') != -1 || ports[i].search('usbserial') != -1) port = ports[i];\n\t\t\t}\n\t\t}\n\t\tif (port){\n\t\t\tattemptConnection(port);\n\t\t}\telse{\n\t\t\tdetectArduinoOnRaspberryPI();\n\t\t}\n\t});\n}\n\nvar detectArduinoOnRaspberryPI = function()\n{\n\tvar port;\n\tconsole.log('* attempting to detect arduino on raspberry pi *');\n\tserialport.list(function (e, ports) {\n\t\tports.forEach(function(obj) {\n\t\t\tif (obj.hasOwnProperty('pnpId')){\n\t\t// FTDI captures the duemilanove //\n\t\t// Arduino captures the leonardo //\n\t\t\t\tif (obj.pnpId.search('FTDI') != -1 || obj.pnpId.search('Arduino') != -1) {\n\t\t\t\t\tport = obj.comName;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (port){\n\t\t\tattemptConnection(port);\n\t\t}\telse{\n\t\t\tconsole.log('* failed to find arduino : please check your connections *');\n\t\t}\n\t});\n}\n\nvar attemptConnection = function(port)\n{\n\tconsole.log('* attempting to connect to arduino at :', port, ' *');\n\tarduino = new serialport.SerialPort(port, { baudrate: 9600, parser: serialport.parsers.readline(\"\\n\") });\n\tarduino.on(\"open\", function () {\n\t\tconsole.log('* connection to arduino successful ! *');\n\t\tarduino.on('data', function(data){\n\t// send incoming data from arduino out to the socket server //\n\t\t\tsocket.onDataFromArduino(data);\n\t\t});\n\t});\n}\n\nvar sendDataToArduino = function(buffer)\n{\n// calling write if an arduino is not connected will crash the server! //\n\tif (arduino){\n\t\tarduino.write(buffer, function(e, results) {\n\t\t\tif (e) {\n\t\t\t\tconsole.log('error :: ' + e);\n\t\t\t}\telse{\n\t\t\t//\tconsole.log('message successfully sent');\n\t\t\t}\n\t\t});\n\t}\n}\n\ndetectArduinoOnOSX();\n"]],"start1":0,"start2":0,"length1":0,"length2":2559}]],"length":2559}
